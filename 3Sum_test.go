package leetcode

import "testing"
import "reflect"

func TestThreeSum(t *testing.T) {
    cases := []struct {
        input []int
        expected [][]int
    }{
        {[]int{-2,-3,0,0,-2},nil},
        {[]int{-1, 0, 1, 2, -1, -4, -2,-2,-2,2,1,1},[][]int{[]int{-4, 2, 2}, []int{-2, 0, 2}, []int{-2, 1, 1}, []int{-1, -1, 2}, []int{-1, 0, 1}}},
        {[]int{0,0,0,0,0},[][]int{[]int{0, 0, 0}}},
        {[]int{-1, 0, 1, 2, -1, -4},[][]int{[]int{-1, -1, 2}, []int{-1, 0, 1}}},
        {[]int{-1, 0, 1, 2, -1, -4, -2},[][]int{[]int{-2, 0, 2}, []int{-1, -1, 2}, []int{-1, 0, 1}}},
        {[]int{-1, 0, 1},[][]int{[]int{-1, 0, 1}}},
        {[]int{-1, 0},nil},
        {[]int{-1},nil},
        {[]int{-1,0,1,2,-1,-4,-2,0,0,0,0,0,0},[][]int{[]int{-2, 0, 2}, []int{-1, -1, 2}, []int{-1, 0, 1}, []int{0, 0, 0}}},
        {[]int{-13,5,13,12,-2,-11,-1,12,-3,0,-3,-7,-7,-5,-3,-15,-2,14,14,13,6,-11,-11,5,-15,-14,5,-5,-2,0,3,-8,-10,-7,11,-5,-10,-5,-7,-6,2,5,3,2,7,7,3,-10,-2,2,-12,-11,-1,14,10,-9,-15,-8,-7,-9,7,3,-2,5,11,-13,-15,8,-3,-7,-12,7,5,-2,-6,-3,-10,4,2,-5,14,-3,-1,-10,-3,-14,-4,-3,-7,-4,3,8,14,9,-2,10,11,-10,-4,-15,-9,-1,-1,3,4,1,8,1},[][]int{[]int{-15, 1, 14}, []int{-15, 2, 13}, []int{-15, 3, 12}, []int{-15, 4, 11}, []int{-15, 5, 10}, []int{-15, 6, 9}, []int{-15, 7, 8}, []int{-14, 0, 14}, []int{-14, 1, 13}, []int{-14, 2, 12}, []int{-14, 3, 11}, []int{-14, 4, 10}, []int{-14, 5, 9}, []int{-14, 6, 8}, []int{-14, 7, 7}, []int{-13, -1, 14}, []int{-13, 0, 13}, []int{-13, 1, 12}, []int{-13, 2, 11}, []int{-13, 3, 10}, []int{-13, 4, 9}, []int{-13, 5, 8}, []int{-13, 6, 7}, []int{-12, -2, 14}, []int{-12, -1, 13}, []int{-12, 0, 12}, []int{-12, 1, 11}, []int{-12, 2, 10}, []int{-12, 3, 9}, []int{-12, 4, 8}, []int{-12, 5, 7}, []int{-11, -3, 14}, []int{-11, -2, 13}, []int{-11, -1, 12}, []int{-11, 0, 11}, []int{-11, 1, 10}, []int{-11, 2, 9}, []int{-11, 3, 8}, []int{-11, 4, 7}, []int{-11, 5, 6}, []int{-10, -4, 14}, []int{-10, -3, 13}, []int{-10, -2, 12}, []int{-10, -1, 11}, []int{-10, 0, 10}, []int{-10, 1, 9}, []int{-10, 2, 8}, []int{-10, 3, 7}, []int{-10, 4, 6}, []int{-10, 5, 5}, []int{-9, -5, 14}, []int{-9, -4, 13}, []int{-9, -3, 12}, []int{-9, -2, 11}, []int{-9, -1, 10}, []int{-9, 0, 9}, []int{-9, 1, 8}, []int{-9, 2, 7}, []int{-9, 3, 6}, []int{-9, 4, 5}, []int{-8, -6, 14}, []int{-8, -5, 13}, []int{-8, -4, 12}, []int{-8, -3, 11}, []int{-8, -2, 10}, []int{-8, -1, 9}, []int{-8, 0, 8}, []int{-8, 1, 7}, []int{-8, 2, 6}, []int{-8, 3, 5}, []int{-8, 4, 4}, []int{-7, -7, 14}, []int{-7, -6, 13}, []int{-7, -5, 12}, []int{-7, -4, 11}, []int{-7, -3, 10}, []int{-7, -2, 9}, []int{-7, -1, 8}, []int{-7, 0, 7}, []int{-7, 1, 6}, []int{-7, 2, 5}, []int{-7, 3, 4}, []int{-6, -6, 12}, []int{-6, -5, 11}, []int{-6, -4, 10}, []int{-6, -3, 9}, []int{-6, -2, 8}, []int{-6, -1, 7}, []int{-6, 0, 6}, []int{-6, 1, 5}, []int{-6, 2, 4}, []int{-6, 3, 3}, []int{-5, -5, 10}, []int{-5, -4, 9}, []int{-5, -3, 8}, []int{-5, -2, 7}, []int{-5, -1, 6}, []int{-5, 0, 5}, []int{-5, 1, 4}, []int{-5, 2, 3}, []int{-4, -4, 8}, []int{-4, -3, 7}, []int{-4, -2, 6}, []int{-4, -1, 5}, []int{-4, 0, 4}, []int{-4, 1, 3}, []int{-4, 2, 2}, []int{-3, -3, 6}, []int{-3, -2, 5}, []int{-3, -1, 4}, []int{-3, 0, 3}, []int{-3, 1, 2}, []int{-2, -2, 4}, []int{-2, -1, 3}, []int{-2, 0, 2}, []int{-2, 1, 1}, []int{-1, -1, 2}, []int{-1, 0, 1}}},
    }
    for _,c := range cases {
        actual:=threeSum(c.input)
        if !reflect.DeepEqual(actual, c.expected) {
            t.Errorf("Input %#v. Expected: %#v, actual: %#v\n", c.input, c.expected, actual)
        }
    }
}
